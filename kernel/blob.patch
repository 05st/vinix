154c154
< typedef struct dev__nvme__NVMERegisters dev__nvme__NVMERegisters;
---
> typedef volatile struct dev__nvme__NVMERegisters dev__nvme__NVMERegisters;
163,164c163,164
< typedef struct dev__nvme__NVMECommand dev__nvme__NVMECommand;
< typedef struct dev__nvme__NVMECompletion dev__nvme__NVMECompletion;
---
> typedef volatile struct dev__nvme__NVMECommand dev__nvme__NVMECommand;
> typedef volatile struct dev__nvme__NVMECompletion dev__nvme__NVMECompletion;
811c811
< 	strconv__Char_parse_state__start, // 
---
> 	strconv__Char_parse_state__start, //
824c824
< 	AttributeKind__plain, // 
---
> 	AttributeKind__plain, //
831c831
< 	ChanState__success, // 
---
> 	ChanState__success, //
3600,3605c3600,3605
< Array_fixed_voidptr_1 interrupt_thunk_begin = {0}; // global
< Array_fixed_voidptr_1 interrupt_thunk_end = {0}; // global
< Array_fixed_voidptr_1 interrupt_thunk_storage = {0}; // global
< u64 interrupt_thunk_offset; // global
< u64 interrupt_thunk_size; // global
< u32 interrupt_thunk_number; // global
---
> extern voidptr interrupt_thunk_begin[]; // global
> extern voidptr interrupt_thunk_end[]; // global
> extern voidptr interrupt_thunk_storage[]; // global
> extern u64 interrupt_thunk_offset; // global
> extern u64 interrupt_thunk_size; // global
> extern u32 interrupt_thunk_number; // global
3921c3921
< VV_EXPORTED_SYMBOL voidptr memcpy(voidptr dest, const voidptr const_src, u64 size); // exported fn lib.stubs.memcpy
---
> VV_EXPORTED_SYMBOL voidptr memcpy(void* __restrict dest, const void* __restrict const_src, u64 size); // exported fn lib.stubs.memcpy
4862c4862
< 	
---
> 
4875c4875
< 	
---
> 
4881c4881
< static char * v_typeof_interface_IError(int sidx) { /* IError */ 
---
> static char * v_typeof_interface_IError(int sidx) { /* IError */
4887c4887
< static int v_typeof_interface_idx_IError(int sidx) { /* IError */ 
---
> static int v_typeof_interface_idx_IError(int sidx) { /* IError */
4892c4892
< static char * v_typeof_interface_fs__FileSystem(int sidx) { /* fs.FileSystem */ 
---
> static char * v_typeof_interface_fs__FileSystem(int sidx) { /* fs.FileSystem */
4898c4898
< static int v_typeof_interface_idx_fs__FileSystem(int sidx) { /* fs.FileSystem */ 
---
> static int v_typeof_interface_idx_fs__FileSystem(int sidx) { /* fs.FileSystem */
4903c4903
< static char * v_typeof_interface_resource__Resource(int sidx) { /* resource.Resource */ 
---
> static char * v_typeof_interface_resource__Resource(int sidx) { /* resource.Resource */
4922c4922
< static int v_typeof_interface_idx_resource__Resource(int sidx) { /* resource.Resource */ 
---
> static int v_typeof_interface_idx_resource__Resource(int sidx) { /* resource.Resource */
5110,5175d5109
< f32 strings__levenshtein_distance_percentage(string a, string b) {
< 	int d = strings__levenshtein_distance(a, b);
< 	int _t1; /* if prepend */
< 	if (a.len >= b.len) {
< 		_t1 = a.len;
< 	} else {
< 		_t1 = b.len;
< 	}
< 	int l =  _t1;
< 	return (1.00 - ((f32)(d)) / ((f32)(l))) * 100.00;
< }
< 
< f32 strings__dice_coefficient(string s1, string s2) {
< 	if (s1.len == 0 || s2.len == 0) {
< 		return 0.0;
< 	}
< 	if (string__eq(s1, s2)) {
< 		return 1.0;
< 	}
< 	if (s1.len < 2 || s2.len < 2) {
< 		return 0.0;
< 	}
< 	string _t4; /* if prepend */
< 	if (s1.len > s2.len) {
< 		_t4 = s1;
< 	} else {
< 		_t4 = s2;
< 	}
< 	string a =  _t4;
< 	string _t5; /* if prepend */
< 	if (string__eq(a, s1)) {
< 		_t5 = s2;
< 	} else {
< 		_t5 = s1;
< 	}
< 	string b =  _t5;
< 	Map_string_int first_bigrams = new_map(sizeof(string), sizeof(int), &map_hash_string, &map_eq_string, &map_clone_string, &map_free_string);
< 	for (int i = 0; i < a.len - 1; ++i) {
< 		string bigram = string_substr(a, i, i + 2);
< 		int _t6; /* if prepend */
< 		if (_IN_MAP(ADDR(string, bigram), ADDR(map, first_bigrams))) {
< 			_t6 = (*(int*)map_get(ADDR(map, first_bigrams), &(string[]){bigram}, &(int[]){ 0 })) + 1;
< 		} else {
< 			_t6 = 1;
< 		}
< 		int q =  _t6;
< 		map_set(&first_bigrams, &(string[]){bigram}, &(int[]) { q });
< 	}
< 	int intersection_size = 0;
< 	for (int i = 0; i < b.len - 1; ++i) {
< 		string bigram = string_substr(b, i, i + 2);
< 		int _t7; /* if prepend */
< 		if (_IN_MAP(ADDR(string, bigram), ADDR(map, first_bigrams))) {
< 			_t7 = (*(int*)map_get(ADDR(map, first_bigrams), &(string[]){bigram}, &(int[]){ 0 }));
< 		} else {
< 			_t7 = 0;
< 		}
< 		int count =  _t7;
< 		if (count > 0) {
< 			map_set(&first_bigrams, &(string[]){bigram}, &(int[]) { count - 1 });
< 			intersection_size++;
< 		}
< 	}
< 	return (2.0 * ((f32)(intersection_size))) / (((f32)(a.len)) + ((f32)(b.len)) - 2);
< }
< 
5828,5960d5761
< f64 strconv__atof64(string s) {
< 	strconv__PrepNumber pn = (strconv__PrepNumber){.negative = 0,.exponent = 0,.mantissa = 0,};
< 	int res_parsing = 0;
< 	strconv__Float64u res = (strconv__Float64u){0};
< 	multi_return_int_strconv__PrepNumber mr_9336 = strconv__parser(s);
< 	res_parsing = mr_9336.arg0;
< 	pn = mr_9336.arg1;
< 
< 	if (res_parsing == (_const_strconv__parser_ok)) {
< 		res.u = strconv__converter((voidptr)&/*qq*/pn);
< 	}
< 	else if (res_parsing == (_const_strconv__parser_pzero)) {
< 		res.u = _const_strconv__double_plus_zero;
< 	}
< 	else if (res_parsing == (_const_strconv__parser_mzero)) {
< 		res.u = _const_strconv__double_minus_zero;
< 	}
< 	else if (res_parsing == (_const_strconv__parser_pinf)) {
< 		res.u = _const_strconv__double_plus_infinity;
< 	}
< 	else if (res_parsing == (_const_strconv__parser_minf)) {
< 		res.u = _const_strconv__double_minus_infinity;
< 	}
< 	else {
< 	};
< 	return res.f;
< }
< 
< f64 strconv__atof_quick(string s) {
< 	strconv__Float64u f = (strconv__Float64u){0};
< 	f64 sign = ((f64)(1.0));
< 	int i = 0;
< 	for (;;) {
< 		if (!(i < s.len && string_at(s, i) == ' ')) break;
< 		i++;
< 	}
< 	if (i < s.len) {
< 		if (string_at(s, i) == '-') {
< 			sign = -1.0;
< 			i++;
< 		} else if (string_at(s, i) == '+') {
< 			i++;
< 		}
< 	}
< 	if (string_at(s, i) == 'i' && i + 2 < s.len && string_at(s, i + 1) == 'n' && string_at(s, i + 2) == 'f') {
< 		if (sign > 0.0) {
< 			f.u = _const_strconv__double_plus_infinity;
< 		} else {
< 			f.u = _const_strconv__double_minus_infinity;
< 		}
< 		return f.f;
< 	}
< 	for (;;) {
< 		if (!(i < s.len && string_at(s, i) == '0')) break;
< 		i++;
< 		if (i >= s.len) {
< 			if (sign > 0.0) {
< 				f.u = _const_strconv__double_plus_zero;
< 			} else {
< 				f.u = _const_strconv__double_minus_zero;
< 			}
< 			return f.f;
< 		}
< 	}
< 	for (;;) {
< 		if (!(i < s.len && (string_at(s, i) >= '0' && string_at(s, i) <= '9'))) break;
< 		f.f *= ((f64)(10.0));
< 		f.f += ((f64)(string_at(s, i) - '0'));
< 		i++;
< 	}
< 	if (i < s.len && string_at(s, i) == '.') {
< 		i++;
< 		f64 frac_mul = ((f64)(0.1));
< 		for (;;) {
< 			if (!(i < s.len && (string_at(s, i) >= '0' && string_at(s, i) <= '9'))) break;
< 			f.f += ((f64)(string_at(s, i) - '0')) * frac_mul;
< 			frac_mul *= ((f64)(0.1));
< 			i++;
< 		}
< 	}
< 	if (i < s.len && (string_at(s, i) == 'e' || string_at(s, i) == 'E')) {
< 		i++;
< 		int exp = 0;
< 		int exp_sign = 1;
< 		if (i < s.len) {
< 			if (string_at(s, i) == '-') {
< 				exp_sign = -1;
< 				i++;
< 			} else if (string_at(s, i) == '+') {
< 				i++;
< 			}
< 		}
< 		for (;;) {
< 			if (!(i < s.len && string_at(s, i) == '0')) break;
< 			i++;
< 		}
< 		for (;;) {
< 			if (!(i < s.len && (string_at(s, i) >= '0' && string_at(s, i) <= '9'))) break;
< 			exp *= 10;
< 			exp += ((int)(string_at(s, i) - '0'));
< 			i++;
< 		}
< 		if (exp_sign == 1) {
< 			if (exp > _const_strconv__pos_exp.len) {
< 				if (sign > 0) {
< 					f.u = _const_strconv__double_plus_infinity;
< 				} else {
< 					f.u = _const_strconv__double_minus_infinity;
< 				}
< 				return f.f;
< 			}
< 			strconv__Float64u tmp_mul = (strconv__Float64u){.u = (*(u64*)/*ee elem_typ */array_get(_const_strconv__pos_exp, exp)),};
< 			f.f = f.f * tmp_mul.f;
< 		} else {
< 			if (exp > _const_strconv__neg_exp.len) {
< 				if (sign > 0) {
< 					f.u = _const_strconv__double_plus_zero;
< 				} else {
< 					f.u = _const_strconv__double_minus_zero;
< 				}
< 				return f.f;
< 			}
< 			strconv__Float64u tmp_mul = (strconv__Float64u){.u = (*(u64*)/*ee elem_typ */array_get(_const_strconv__neg_exp, exp)),};
< 			f.f = f.f * tmp_mul.f;
< 		}
< 	}
< 	{ // Unsafe block
< 		f.f = f.f * sign;
< 		return f.f;
< 	}
< 	return 0;
< }
< 
6084c5885
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
6089c5890
< 	
---
> 
6152c5953
< 	if (_t6.state != 0) { /*or block*/ 
---
> 	if (_t6.state != 0) { /*or block*/
6157c5958
< 	
---
> 
6841,7115d6641
< // Attr: [manualfree]
< string strconv__f64_to_str_lnd1(f64 f, int dec_digit) {
< 	{ // Unsafe block
< 		string s = strconv__f64_to_str(f + ((f64*)_const_strconv__dec_round.data)[dec_digit], 18);
< 		if (s.len > 2 && (s.str[ 0] == 'n' || s.str[ 1] == 'i')) {
< 			return s;
< 		}
< 		bool m_sgn_flag = false;
< 		int sgn = 1;
< 		Array_fixed_byte_26 b = {0};
< 		int d_pos = 1;
< 		int i = 0;
< 		int i1 = 0;
< 		int exp = 0;
< 		int exp_sgn = 1;
< 		int dot_res_sp = -1;
< 		for (int _t2 = 0; _t2 < s.len; ++_t2) {
< 			byte c = s.str[_t2];
< 			if (c == '-') {
< 				sgn = -1;
< 				i++;
< 			} else if (c == '+') {
< 				sgn = 1;
< 				i++;
< 			} else if (c >= '0' && c <= '9') {
< 				b[i1] = c;
< 				i1++;
< 				i++;
< 			} else if (c == '.') {
< 				if (sgn > 0) {
< 					d_pos = i;
< 				} else {
< 					d_pos = i - 1;
< 				}
< 				i++;
< 			} else if (c == 'e') {
< 				i++;
< 				break;
< 			} else {
< 				string_free(&s);
< 				return _SLIT("[Float conversion error!!]");
< 			}
< 		}
< 		b[i1] = 0;
< 		if (s.str[ i] == '-') {
< 			exp_sgn = -1;
< 			i++;
< 		} else if (s.str[ i] == '+') {
< 			exp_sgn = 1;
< 			i++;
< 		}
< 		int c = i;
< 		for (;;) {
< 			if (!(c < s.len)) break;
< 			exp = exp * 10 + ((int)(s.str[ c] - '0'));
< 			c++;
< 		}
< 		Array_byte res = __new_array_with_default(exp + 32, 0, sizeof(byte), &(byte[]){0});
< 		int r_i = 0;
< 		string_free(&s);
< 		if (sgn == 1) {
< 			if (m_sgn_flag) {
< 				((byte*)res.data)[r_i] = '+';
< 				r_i++;
< 			}
< 		} else {
< 			((byte*)res.data)[r_i] = '-';
< 			r_i++;
< 		}
< 		i = 0;
< 		if (exp_sgn >= 0) {
< 			for (;;) {
< 				if (!(b[i] != 0)) break;
< 				((byte*)res.data)[r_i] = b[i];
< 				r_i++;
< 				i++;
< 				if (i >= d_pos && exp >= 0) {
< 					if (exp == 0) {
< 						dot_res_sp = r_i;
< 						((byte*)res.data)[r_i] = '.';
< 						r_i++;
< 					}
< 					exp--;
< 				}
< 			}
< 			for (;;) {
< 				if (!(exp >= 0)) break;
< 				((byte*)res.data)[r_i] = '0';
< 				r_i++;
< 				exp--;
< 			}
< 		} else {
< 			bool dot_p = true;
< 			for (;;) {
< 				if (!(exp > 0)) break;
< 				((byte*)res.data)[r_i] = '0';
< 				r_i++;
< 				exp--;
< 				if (dot_p) {
< 					dot_res_sp = r_i;
< 					((byte*)res.data)[r_i] = '.';
< 					r_i++;
< 					dot_p = false;
< 				}
< 			}
< 			for (;;) {
< 				if (!(b[i] != 0)) break;
< 				((byte*)res.data)[r_i] = b[i];
< 				r_i++;
< 				i++;
< 			}
< 		}
< 		if (dec_digit <= 0) {
< 			string tmp_res = string_clone(tos(res.data, dot_res_sp));
< 			array_free(&res);
< 			return tmp_res;
< 		}
< 		if (dot_res_sp >= 0) {
< 			if ((r_i - dot_res_sp) > dec_digit) {
< 				r_i = dot_res_sp + dec_digit + 1;
< 			}
< 			((byte*)res.data)[r_i] = 0;
< 			string tmp_res = string_clone(tos(res.data, r_i));
< 			array_free(&res);
< 			return tmp_res;
< 		} else {
< 			if (dec_digit > 0) {
< 				int c1 = 0;
< 				((byte*)res.data)[r_i] = '.';
< 				r_i++;
< 				for (;;) {
< 					if (!(c1 < dec_digit)) break;
< 					((byte*)res.data)[r_i] = '0';
< 					r_i++;
< 					c1++;
< 				}
< 				((byte*)res.data)[r_i] = 0;
< 			}
< 			string tmp_res = string_clone(tos(res.data, r_i));
< 			array_free(&res);
< 			return tmp_res;
< 		}
< 	}
< 	return (string){.str=(byteptr)"", .is_lit=1};
< }
< 
< // Attr: [manualfree]
< string strconv__format_fl(f64 f, strconv__BF_param p) {
< 	{ // Unsafe block
< 		string s = _SLIT("");
< 		string fs = strconv__f64_to_str_lnd1((f >= 0.0 ? (f) : (-f)), p.len1);
< 		if (string_at(fs, 0) == '[') {
< 			string_free(&s);
< 			return fs;
< 		}
< 		if (p.rm_tail_zero) {
< 			string tmp = fs;
< 			fs = strconv__remove_tail_zeros(fs);
< 			string_free(&tmp);
< 		}
< 		strings__Builder res = strings__new_builder((p.len0 > fs.len ? (p.len0) : (fs.len)));
< 		int sign_len_diff = 0;
< 		if (p.pad_ch == '0') {
< 			if (p.positive) {
< 				if (p.sign_flag) {
< 					strings__Builder_write_b(&res, '+');
< 					sign_len_diff = -1;
< 				}
< 			} else {
< 				strings__Builder_write_b(&res, '-');
< 				sign_len_diff = -1;
< 			}
< 			string tmp = s;
< 			s = string_clone(fs);
< 			string_free(&tmp);
< 		} else {
< 			if (p.positive) {
< 				if (p.sign_flag) {
< 					string tmp = s;
< 					s = string__plus(_SLIT("+"), fs);
< 					string_free(&tmp);
< 				} else {
< 					string tmp = s;
< 					s = string_clone(fs);
< 					string_free(&tmp);
< 				}
< 			} else {
< 				string tmp = s;
< 				s = string__plus(_SLIT("-"), fs);
< 				string_free(&tmp);
< 			}
< 		}
< 		int dif = p.len0 - s.len + sign_len_diff;
< 		if (p.allign == strconv__Align_text__right) {
< 			for (int i1 = 0; i1 < dif; i1++) {
< 				strings__Builder_write_b(&res, p.pad_ch);
< 			}
< 		}
< 		strings__Builder_write_string(&res, s);
< 		if (p.allign == strconv__Align_text__left) {
< 			for (int i1 = 0; i1 < dif; i1++) {
< 				strings__Builder_write_b(&res, p.pad_ch);
< 			}
< 		}
< 		string_free(&s);
< 		string_free(&fs);
< 		string tmp_res = strings__Builder_str(&res);
< 		strings__Builder_free(&res);
< 		return tmp_res;
< 	}
< 	return (string){.str=(byteptr)"", .is_lit=1};
< }
< 
< // Attr: [manualfree]
< string strconv__format_es(f64 f, strconv__BF_param p) {
< 	{ // Unsafe block
< 		string s = _SLIT("");
< 		string fs = strconv__f64_to_str_pad((f > 0 ? (f) : (-f)), p.len1);
< 		if (p.rm_tail_zero) {
< 			fs = strconv__remove_tail_zeros(fs);
< 		}
< 		strings__Builder res = strings__new_builder((p.len0 > fs.len ? (p.len0) : (fs.len)));
< 		int sign_len_diff = 0;
< 		if (p.pad_ch == '0') {
< 			if (p.positive) {
< 				if (p.sign_flag) {
< 					strings__Builder_write_b(&res, '+');
< 					sign_len_diff = -1;
< 				}
< 			} else {
< 				strings__Builder_write_b(&res, '-');
< 				sign_len_diff = -1;
< 			}
< 			string tmp = s;
< 			s = string_clone(fs);
< 			string_free(&tmp);
< 		} else {
< 			if (p.positive) {
< 				if (p.sign_flag) {
< 					string tmp = s;
< 					s = string__plus(_SLIT("+"), fs);
< 					string_free(&tmp);
< 				} else {
< 					string tmp = s;
< 					s = string_clone(fs);
< 					string_free(&tmp);
< 				}
< 			} else {
< 				string tmp = s;
< 				s = string__plus(_SLIT("-"), fs);
< 				string_free(&tmp);
< 			}
< 		}
< 		int dif = p.len0 - s.len + sign_len_diff;
< 		if (p.allign == strconv__Align_text__right) {
< 			for (int i1 = 0; i1 < dif; i1++) {
< 				strings__Builder_write_b(&res, p.pad_ch);
< 			}
< 		}
< 		strings__Builder_write_string(&res, s);
< 		if (p.allign == strconv__Align_text__left) {
< 			for (int i1 = 0; i1 < dif; i1++) {
< 				strings__Builder_write_b(&res, p.pad_ch);
< 			}
< 		}
< 		string_free(&s);
< 		string_free(&fs);
< 		string tmp_res = strings__Builder_str(&res);
< 		strings__Builder_free(&res);
< 		return tmp_res;
< 	}
< 	return (string){.str=(byteptr)"", .is_lit=1};
< }
< 
< // Attr: [direct_array_access]
8052,8166c7578
< 			if ((ch == 'f' || ch == 'F')) {
< 				strconv__v_sprintf_panic(p_index, pt.len);
< 				f64 x = *(((f64*)((*(voidptr*)/*ee elem_typ */array_get(pt, p_index)))));
< 				bool positive = x >= ((f64)(0.0));
< 				int _t9; /* if prepend */
< 				if (len1 >= 0) {
< 					_t9 = len1;
< 				} else {
< 					_t9 = def_len1;
< 				}
< 				len1 =  _t9;
< 				string s = strconv__format_fl_old(((f64)(x)), (strconv__BF_param){
< 					.pad_ch = pad_ch,
< 					.len0 = len0,
< 					.len1 = len1,
< 					.positive = positive,
< 					.sign_flag = sign,
< 					.allign = allign,
< 					.rm_tail_zero = 0,
< 				});
< 				string _t10; /* if prepend */
< 				if (ch == 'F') {
< 					_t10 = string_to_upper(s);
< 				} else {
< 					_t10 = s;
< 				}
< 				strings__Builder_write_string(&res,  _t10);
< 				status = strconv__Char_parse_state__reset_params;
< 				p_index++;
< 				i++;
< 				continue;
< 			} else if ((ch == 'e' || ch == 'E')) {
< 				strconv__v_sprintf_panic(p_index, pt.len);
< 				f64 x = *(((f64*)((*(voidptr*)/*ee elem_typ */array_get(pt, p_index)))));
< 				bool positive = x >= ((f64)(0.0));
< 				int _t11; /* if prepend */
< 				if (len1 >= 0) {
< 					_t11 = len1;
< 				} else {
< 					_t11 = def_len1;
< 				}
< 				len1 =  _t11;
< 				string s = strconv__format_es_old(((f64)(x)), (strconv__BF_param){
< 					.pad_ch = pad_ch,
< 					.len0 = len0,
< 					.len1 = len1,
< 					.positive = positive,
< 					.sign_flag = sign,
< 					.allign = allign,
< 					.rm_tail_zero = 0,
< 				});
< 				string _t12; /* if prepend */
< 				if (ch == 'E') {
< 					_t12 = string_to_upper(s);
< 				} else {
< 					_t12 = s;
< 				}
< 				strings__Builder_write_string(&res,  _t12);
< 				status = strconv__Char_parse_state__reset_params;
< 				p_index++;
< 				i++;
< 				continue;
< 			} else if ((ch == 'g' || ch == 'G')) {
< 				strconv__v_sprintf_panic(p_index, pt.len);
< 				f64 x = *(((f64*)((*(voidptr*)/*ee elem_typ */array_get(pt, p_index)))));
< 				bool positive = x >= ((f64)(0.0));
< 				string s = _SLIT("");
< 				f64 tx = strconv__fabs(x);
< 				if (tx < 999999.0 && tx >= 0.00001) {
< 					int _t13; /* if prepend */
< 					if (len1 >= 0) {
< 						_t13 = len1 + 1;
< 					} else {
< 						_t13 = def_len1;
< 					}
< 					len1 =  _t13;
< 					s = strconv__format_fl_old(x, (strconv__BF_param){
< 						.pad_ch = pad_ch,
< 						.len0 = len0,
< 						.len1 = len1,
< 						.positive = positive,
< 						.sign_flag = sign,
< 						.allign = allign,
< 						.rm_tail_zero = true,
< 					});
< 				} else {
< 					int _t14; /* if prepend */
< 					if (len1 >= 0) {
< 						_t14 = len1 + 1;
< 					} else {
< 						_t14 = def_len1;
< 					}
< 					len1 =  _t14;
< 					s = strconv__format_es_old(x, (strconv__BF_param){
< 						.pad_ch = pad_ch,
< 						.len0 = len0,
< 						.len1 = len1,
< 						.positive = positive,
< 						.sign_flag = sign,
< 						.allign = allign,
< 						.rm_tail_zero = true,
< 					});
< 				}
< 				string _t15; /* if prepend */
< 				if (ch == 'G') {
< 					_t15 = string_to_upper(s);
< 				} else {
< 					_t15 = s;
< 				}
< 				strings__Builder_write_string(&res,  _t15);
< 				status = strconv__Char_parse_state__reset_params;
< 				p_index++;
< 				i++;
< 				continue;
< 			} else if (ch == 's') {
---
> 			if (ch == 's') {
8204,8338d7615
< VV_LOCAL_SYMBOL f64 strconv__fabs(f64 x) {
< 	if (x < 0.0) {
< 		return -x;
< 	}
< 	return x;
< }
< 
< // Attr: [manualfree]
< string strconv__format_fl_old(f64 f, strconv__BF_param p) {
< 	{ // Unsafe block
< 		string s = _SLIT("");
< 		string fs = strconv__f64_to_str_lnd1((f >= 0.0 ? (f) : (-f)), p.len1);
< 		if (string_at(fs, 0) == '[') {
< 			string_free(&s);
< 			return fs;
< 		}
< 		if (p.rm_tail_zero) {
< 			string tmp = fs;
< 			fs = strconv__remove_tail_zeros_old(fs);
< 			string_free(&tmp);
< 		}
< 		strings__Builder res = strings__new_builder((p.len0 > fs.len ? (p.len0) : (fs.len)));
< 		int sign_len_diff = 0;
< 		if (p.pad_ch == '0') {
< 			if (p.positive) {
< 				if (p.sign_flag) {
< 					strings__Builder_write_b(&res, '+');
< 					sign_len_diff = -1;
< 				}
< 			} else {
< 				strings__Builder_write_b(&res, '-');
< 				sign_len_diff = -1;
< 			}
< 			string tmp = s;
< 			s = string_clone(fs);
< 			string_free(&tmp);
< 		} else {
< 			if (p.positive) {
< 				if (p.sign_flag) {
< 					string tmp = s;
< 					s = string__plus(_SLIT("+"), fs);
< 					string_free(&tmp);
< 				} else {
< 					string tmp = s;
< 					s = string_clone(fs);
< 					string_free(&tmp);
< 				}
< 			} else {
< 				string tmp = s;
< 				s = string__plus(_SLIT("-"), fs);
< 				string_free(&tmp);
< 			}
< 		}
< 		int dif = p.len0 - s.len + sign_len_diff;
< 		if (p.allign == strconv__Align_text__right) {
< 			for (int i1 = 0; i1 < dif; i1++) {
< 				strings__Builder_write_b(&res, p.pad_ch);
< 			}
< 		}
< 		strings__Builder_write_string(&res, s);
< 		if (p.allign == strconv__Align_text__left) {
< 			for (int i1 = 0; i1 < dif; i1++) {
< 				strings__Builder_write_b(&res, p.pad_ch);
< 			}
< 		}
< 		string_free(&s);
< 		string_free(&fs);
< 		string tmp_res = strings__Builder_str(&res);
< 		strings__Builder_free(&res);
< 		return tmp_res;
< 	}
< 	return (string){.str=(byteptr)"", .is_lit=1};
< }
< 
< // Attr: [manualfree]
< string strconv__format_es_old(f64 f, strconv__BF_param p) {
< 	{ // Unsafe block
< 		string s = _SLIT("");
< 		string fs = strconv__f64_to_str_pad((f > 0 ? (f) : (-f)), p.len1);
< 		if (p.rm_tail_zero) {
< 			fs = strconv__remove_tail_zeros_old(fs);
< 		}
< 		strings__Builder res = strings__new_builder((p.len0 > fs.len ? (p.len0) : (fs.len)));
< 		int sign_len_diff = 0;
< 		if (p.pad_ch == '0') {
< 			if (p.positive) {
< 				if (p.sign_flag) {
< 					strings__Builder_write_b(&res, '+');
< 					sign_len_diff = -1;
< 				}
< 			} else {
< 				strings__Builder_write_b(&res, '-');
< 				sign_len_diff = -1;
< 			}
< 			string tmp = s;
< 			s = string_clone(fs);
< 			string_free(&tmp);
< 		} else {
< 			if (p.positive) {
< 				if (p.sign_flag) {
< 					string tmp = s;
< 					s = string__plus(_SLIT("+"), fs);
< 					string_free(&tmp);
< 				} else {
< 					string tmp = s;
< 					s = string_clone(fs);
< 					string_free(&tmp);
< 				}
< 			} else {
< 				string tmp = s;
< 				s = string__plus(_SLIT("-"), fs);
< 				string_free(&tmp);
< 			}
< 		}
< 		int dif = p.len0 - s.len + sign_len_diff;
< 		if (p.allign == strconv__Align_text__right) {
< 			for (int i1 = 0; i1 < dif; i1++) {
< 				strings__Builder_write_b(&res, p.pad_ch);
< 			}
< 		}
< 		strings__Builder_write_string(&res, s);
< 		if (p.allign == strconv__Align_text__left) {
< 			for (int i1 = 0; i1 < dif; i1++) {
< 				strings__Builder_write_b(&res, p.pad_ch);
< 			}
< 		}
< 		string_free(&s);
< 		string_free(&fs);
< 		string tmp_res = strings__Builder_str(&res);
< 		strings__Builder_free(&res);
< 		return tmp_res;
< 	}
< 	return (string){.str=(byteptr)"", .is_lit=1};
< }
< 
9610,9804d8886
< // Attr: [inline]
< inline string f64_str(f64 x) {
< 	{ // Unsafe block
< 		strconv__Float64u f = (strconv__Float64u){.f = x,};
< 		if (f.u == _const_strconv__double_minus_zero) {
< 			return _SLIT("-0");
< 		}
< 		if (f.u == _const_strconv__double_plus_zero) {
< 			return _SLIT("0");
< 		}
< 	}
< 	f64 abs_x = f64_abs(x);
< 	if (abs_x >= 0.0001 && abs_x < 1.0e6) {
< 		return strconv__f64_to_str_l(x);
< 	} else {
< 		return strconv__ftoa_64(x);
< 	}
< 	return (string){.str=(byteptr)"", .is_lit=1};
< }
< 
< // Attr: [inline]
< inline string f64_strg(f64 x) {
< 	if (x == 0) {
< 		return _SLIT("0");
< 	}
< 	f64 abs_x = f64_abs(x);
< 	if (abs_x >= 0.0001 && abs_x < 1.0e6) {
< 		return strconv__f64_to_str_l_no_dot(x);
< 	} else {
< 		return strconv__ftoa_64(x);
< 	}
< 	return (string){.str=(byteptr)"", .is_lit=1};
< }
< 
< // Attr: [inline]
< inline string float_literal_str(float_literal d) {
< 	return f64_str(((f64)(d)));
< }
< 
< // Attr: [inline]
< inline string f64_strsci(f64 x, int digit_num) {
< 	int n_digit = digit_num;
< 	if (n_digit < 1) {
< 		n_digit = 1;
< 	} else if (n_digit > 17) {
< 		n_digit = 17;
< 	}
< 	return strconv__f64_to_str(x, n_digit);
< }
< 
< // Attr: [inline]
< inline string f64_strlong(f64 x) {
< 	return strconv__f64_to_str_l(x);
< }
< 
< // Attr: [inline]
< inline string f32_str(f32 x) {
< 	{ // Unsafe block
< 		strconv__Float32u f = (strconv__Float32u){.f = x,};
< 		if (f.u == _const_strconv__single_minus_zero) {
< 			return _SLIT("-0");
< 		}
< 		if (f.u == _const_strconv__single_plus_zero) {
< 			return _SLIT("0");
< 		}
< 	}
< 	f32 abs_x = f32_abs(x);
< 	if (abs_x >= 0.0001 && abs_x < 1.0e6) {
< 		return strconv__f32_to_str_l(x);
< 	} else {
< 		return strconv__ftoa_32(x);
< 	}
< 	return (string){.str=(byteptr)"", .is_lit=1};
< }
< 
< // Attr: [inline]
< inline string f32_strg(f32 x) {
< 	if (x == 0) {
< 		return _SLIT("0");
< 	}
< 	f32 abs_x = f32_abs(x);
< 	if (abs_x >= 0.0001 && abs_x < 1.0e6) {
< 		return strconv__f32_to_str_l_no_dot(x);
< 	} else {
< 		return strconv__ftoa_32(x);
< 	}
< 	return (string){.str=(byteptr)"", .is_lit=1};
< }
< 
< // Attr: [inline]
< inline string f32_strsci(f32 x, int digit_num) {
< 	int n_digit = digit_num;
< 	if (n_digit < 1) {
< 		n_digit = 1;
< 	} else if (n_digit > 8) {
< 		n_digit = 8;
< 	}
< 	return strconv__f32_to_str(x, n_digit);
< }
< 
< // Attr: [inline]
< inline string f32_strlong(f32 x) {
< 	return strconv__f32_to_str_l(x);
< }
< 
< // Attr: [inline]
< inline f32 f32_abs(f32 a) {
< 	f32 _t2; /* if prepend */
< 	if (a < 0) {
< 		_t2 = -a;
< 	} else {
< 		_t2 = a;
< 	}
< 	return  _t2;
< }
< 
< // Attr: [inline]
< inline VV_LOCAL_SYMBOL f64 f64_abs(f64 a) {
< 	f64 _t2; /* if prepend */
< 	if (a < 0) {
< 		_t2 = -a;
< 	} else {
< 		_t2 = a;
< 	}
< 	return  _t2;
< }
< 
< // Attr: [inline]
< inline f32 f32_max(f32 a, f32 b) {
< 	f32 _t2; /* if prepend */
< 	if (a > b) {
< 		_t2 = a;
< 	} else {
< 		_t2 = b;
< 	}
< 	return  _t2;
< }
< 
< // Attr: [inline]
< inline f32 f32_min(f32 a, f32 b) {
< 	f32 _t2; /* if prepend */
< 	if (a < b) {
< 		_t2 = a;
< 	} else {
< 		_t2 = b;
< 	}
< 	return  _t2;
< }
< 
< // Attr: [inline]
< inline f64 f64_max(f64 a, f64 b) {
< 	f64 _t2; /* if prepend */
< 	if (a > b) {
< 		_t2 = a;
< 	} else {
< 		_t2 = b;
< 	}
< 	return  _t2;
< }
< 
< // Attr: [inline]
< inline VV_LOCAL_SYMBOL f64 f64_min(f64 a, f64 b) {
< 	f64 _t2; /* if prepend */
< 	if (a < b) {
< 		_t2 = a;
< 	} else {
< 		_t2 = b;
< 	}
< 	return  _t2;
< }
< 
< // Attr: [inline]
< inline bool f32_eq_epsilon(f32 a, f32 b) {
< 	f32 hi = f32_max(f32_abs(a), f32_abs(b));
< 	f32 delta = f32_abs(a - b);
< 	if (hi > ((f32)(1.0))) {
< 		return delta <= hi * (4 * ((f32)(FLT_EPSILON)));
< 	} else {
< 		return (1 / (4 * ((f32)(FLT_EPSILON)))) * delta <= hi;
< 	}
< 	return 0;
< }
< 
< // Attr: [inline]
< inline bool f64_eq_epsilon(f64 a, f64 b) {
< 	f64 hi = f64_max(f64_abs(a), f64_abs(b));
< 	f64 delta = f64_abs(a - b);
< 	if (hi > 1.0) {
< 		return delta <= hi * (4 * ((f64)(DBL_EPSILON)));
< 	} else {
< 		return (1 / (4 * ((f64)(DBL_EPSILON)))) * delta <= hi;
< 	}
< 	return 0;
< }
< 
10184c9266
< 	
---
> 
10520c9602
< 	f32 load_factor = ((f32)(m->len << 1)) / ((f32)(m->even_index));
---
> 	u32 load_factor = (m->len << 1) / m->even_index;
10961,10965d10042
< 		#if !defined(_VFREESTANDING)
< 		{
< 			atexit((voidptr)prealloc_vcleanup);
< 		}
< 		#endif
11712c10789
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
11716c10793
< 	
---
> 
11722c10799
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
11726c10803
< 	
---
> 
11732c10809
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
11736c10813
< 	
---
> 
11742c10819
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
11746,11752d10822
< 	
<  	return ((i16)( (*(i64*)_t2.data)));
< }
< 
< f32 string_f32(string s) {
< 	return ((f32)(strconv__atof64(s)));
< }
11754,11755c10824
< f64 string_f64(string s) {
< 	return strconv__atof64(s);
---
>  	return ((i16)( (*(i64*)_t2.data)));
11760c10829
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
11764c10833
< 	
---
> 
11770c10839
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
11774c10843
< 	
---
> 
11780c10849
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
11784c10853
< 	
---
> 
12926,12947d11994
< inline VV_LOCAL_SYMBOL f32 fabs32(f32 x) {
< 	f32 _t2; /* if prepend */
< 	if (x < 0) {
< 		_t2 = -x;
< 	} else {
< 		_t2 = x;
< 	}
< 	return  _t2;
< }
< 
< // Attr: [inline]
< inline VV_LOCAL_SYMBOL f64 fabs64(f64 x) {
< 	f64 _t2; /* if prepend */
< 	if (x < 0) {
< 		_t2 = -x;
< 	} else {
< 		_t2 = x;
< 	}
< 	return  _t2;
< }
< 
< // Attr: [inline]
13229,13459c12276
< 		if (typ == (StrIntpType__si_f32)) {
< 			if (use_default_str) {
< 				string f = f32_str(data.d.d_f32);
< 				if (upper_case) {
< 					string tmp = f;
< 					f = string_to_upper(f);
< 					string_free(&tmp);
< 				}
< 				strings__Builder_write_string(sb, f);
< 				string_free(&f);
< 			} else {
< 				if (data.d.d_f32 < 0) {
< 					bf.positive = false;
< 				}
< 				string f = strconv__format_fl(data.d.d_f32, bf);
< 				if (upper_case) {
< 					string tmp = f;
< 					f = string_to_upper(f);
< 					string_free(&tmp);
< 				}
< 				strings__Builder_write_string(sb, f);
< 				string_free(&f);
< 			}
< 		}
< 		else if (typ == (StrIntpType__si_f64)) {
< 			if (use_default_str) {
< 				string f = f64_str(data.d.d_f64);
< 				if (upper_case) {
< 					string tmp = f;
< 					f = string_to_upper(f);
< 					string_free(&tmp);
< 				}
< 				strings__Builder_write_string(sb, f);
< 				string_free(&f);
< 			} else {
< 				if (data.d.d_f64 < 0) {
< 					bf.positive = false;
< 				}
< 				strconv__Float64u f_union = (strconv__Float64u){.f = data.d.d_f64,};
< 				if (f_union.u == _const_strconv__double_minus_zero) {
< 					bf.positive = false;
< 				}
< 				string f = strconv__format_fl(data.d.d_f64, bf);
< 				if (upper_case) {
< 					string tmp = f;
< 					f = string_to_upper(f);
< 					string_free(&tmp);
< 				}
< 				strings__Builder_write_string(sb, f);
< 				string_free(&f);
< 			}
< 		}
< 		else if (typ == (StrIntpType__si_g32)) {
< 			if (use_default_str) {
< 				string f = f32_strg(data.d.d_f32);
< 				if (upper_case) {
< 					string tmp = f;
< 					f = string_to_upper(f);
< 					string_free(&tmp);
< 				}
< 				strings__Builder_write_string(sb, f);
< 				string_free(&f);
< 			} else {
< 				if (data.d.d_f32 == _const_strconv__single_plus_zero) {
< 					string tmp_str = _SLIT("0");
< 					strconv__format_str_sb(tmp_str, bf, sb);
< 					string_free(&tmp_str);
< 					return;
< 				}
< 				if (data.d.d_f32 == _const_strconv__single_minus_zero) {
< 					string tmp_str = _SLIT("-0");
< 					strconv__format_str_sb(tmp_str, bf, sb);
< 					string_free(&tmp_str);
< 					return;
< 				}
< 				if (data.d.d_f32 == _const_strconv__single_plus_infinity) {
< 					string tmp_str = _SLIT("+inf");
< 					if (upper_case) {
< 						tmp_str = _SLIT("+INF");
< 					}
< 					strconv__format_str_sb(tmp_str, bf, sb);
< 					string_free(&tmp_str);
< 				}
< 				if (data.d.d_f32 == _const_strconv__single_minus_infinity) {
< 					string tmp_str = _SLIT("-inf");
< 					if (upper_case) {
< 						tmp_str = _SLIT("-INF");
< 					}
< 					strconv__format_str_sb(tmp_str, bf, sb);
< 					string_free(&tmp_str);
< 				}
< 				if (data.d.d_f32 < 0) {
< 					bf.positive = false;
< 				}
< 				f32 d = fabs32(data.d.d_f32);
< 				if (d < 999999.0 && d >= 0.00001) {
< 					string f = strconv__format_fl(data.d.d_f32, bf);
< 					if (upper_case) {
< 						string tmp = f;
< 						f = string_to_upper(f);
< 						string_free(&tmp);
< 					}
< 					strings__Builder_write_string(sb, f);
< 					string_free(&f);
< 					return;
< 				}
< 				string f = strconv__format_es(data.d.d_f32, bf);
< 				if (upper_case) {
< 					string tmp = f;
< 					f = string_to_upper(f);
< 					string_free(&tmp);
< 				}
< 				strings__Builder_write_string(sb, f);
< 				string_free(&f);
< 			}
< 		}
< 		else if (typ == (StrIntpType__si_g64)) {
< 			if (use_default_str) {
< 				string f = f64_strg(data.d.d_f64);
< 				if (upper_case) {
< 					string tmp = f;
< 					f = string_to_upper(f);
< 					string_free(&tmp);
< 				}
< 				strings__Builder_write_string(sb, f);
< 				string_free(&f);
< 			} else {
< 				if (data.d.d_f64 == _const_strconv__double_plus_zero) {
< 					string tmp_str = _SLIT("0");
< 					strconv__format_str_sb(tmp_str, bf, sb);
< 					string_free(&tmp_str);
< 					return;
< 				}
< 				if (data.d.d_f64 == _const_strconv__double_minus_zero) {
< 					string tmp_str = _SLIT("-0");
< 					strconv__format_str_sb(tmp_str, bf, sb);
< 					string_free(&tmp_str);
< 					return;
< 				}
< 				if (data.d.d_f64 == _const_strconv__double_plus_infinity) {
< 					string tmp_str = _SLIT("+inf");
< 					if (upper_case) {
< 						tmp_str = _SLIT("+INF");
< 					}
< 					strconv__format_str_sb(tmp_str, bf, sb);
< 					string_free(&tmp_str);
< 				}
< 				if (data.d.d_f64 == _const_strconv__double_minus_infinity) {
< 					string tmp_str = _SLIT("-inf");
< 					if (upper_case) {
< 						tmp_str = _SLIT("-INF");
< 					}
< 					strconv__format_str_sb(tmp_str, bf, sb);
< 					string_free(&tmp_str);
< 				}
< 				if (data.d.d_f64 < 0) {
< 					bf.positive = false;
< 				}
< 				f64 d = fabs64(data.d.d_f64);
< 				if (d < 999999.0 && d >= 0.00001) {
< 					string f = strconv__format_fl(data.d.d_f64, bf);
< 					if (upper_case) {
< 						string tmp = f;
< 						f = string_to_upper(f);
< 						string_free(&tmp);
< 					}
< 					strings__Builder_write_string(sb, f);
< 					string_free(&f);
< 					return;
< 				}
< 				string f = strconv__format_es(data.d.d_f64, bf);
< 				if (upper_case) {
< 					string tmp = f;
< 					f = string_to_upper(f);
< 					string_free(&tmp);
< 				}
< 				strings__Builder_write_string(sb, f);
< 				string_free(&f);
< 			}
< 		}
< 		else if (typ == (StrIntpType__si_e32)) {
< 			bf.len1 = 6;
< 			if (use_default_str) {
< 				string f = f32_str(data.d.d_f32);
< 				if (upper_case) {
< 					string tmp = f;
< 					f = string_to_upper(f);
< 					string_free(&tmp);
< 				}
< 				strings__Builder_write_string(sb, f);
< 				string_free(&f);
< 			} else {
< 				if (data.d.d_f32 < 0) {
< 					bf.positive = false;
< 				}
< 				string f = strconv__format_es(data.d.d_f32, bf);
< 				if (upper_case) {
< 					string tmp = f;
< 					f = string_to_upper(f);
< 					string_free(&tmp);
< 				}
< 				strings__Builder_write_string(sb, f);
< 				string_free(&f);
< 			}
< 		}
< 		else if (typ == (StrIntpType__si_e64)) {
< 			bf.len1 = 6;
< 			if (use_default_str) {
< 				string f = f64_str(data.d.d_f64);
< 				if (upper_case) {
< 					string tmp = f;
< 					f = string_to_upper(f);
< 					string_free(&tmp);
< 				}
< 				strings__Builder_write_string(sb, f);
< 				string_free(&f);
< 			} else {
< 				if (data.d.d_f64 < 0) {
< 					bf.positive = false;
< 				}
< 				string f = strconv__format_es(data.d.d_f64, bf);
< 				if (upper_case) {
< 					string tmp = f;
< 					f = string_to_upper(f);
< 					string_free(&tmp);
< 				}
< 				strings__Builder_write_string(sb, f);
< 				string_free(&f);
< 			}
< 		}
< 		else if (typ == (StrIntpType__si_c)) {
---
> 		if (typ == (StrIntpType__si_c)) {
13520c12337
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
13527c12344
< 	
---
> 
13826c12643
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
13832c12649
< 	
---
> 
13928c12745
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
13933c12750
< 	
---
> 
14699c13516
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
14703c13520
< 	
---
> 
14709c13526
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
14713c13530
< 	
---
> 
15369c14186
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
15374c14191
< 	
---
> 
15481c14298
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
15485c14302
< 	
---
> 
15488c14305
< 	if (_t3.state != 0) { /*or block*/ 
---
> 	if (_t3.state != 0) { /*or block*/
15492c14309
< 	
---
> 
15495c14312
< 	if (_t5.state != 0) { /*or block*/ 
---
> 	if (_t5.state != 0) { /*or block*/
15499c14316
< 	
---
> 
15508c14325
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
15512c14329
< 	
---
> 
15558c14375
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
15562c14379
< 	
---
> 
15580c14397
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
15590c14407
< 	
---
> 
15593c14410
< 	if (_t3.state != 0) { /*or block*/ 
---
> 	if (_t3.state != 0) { /*or block*/
15603c14420
< 	
---
> 
15606c14423
< 	if (_t5.state != 0) { /*or block*/ 
---
> 	if (_t5.state != 0) { /*or block*/
15616c14433
< 	
---
> 
15638c14455
< 		if (_t1.state != 0) { /*or block*/ 
---
> 		if (_t1.state != 0) { /*or block*/
15958c14775
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
15967c14784
< 	
---
> 
16264c15081
< 				if (_t3.state != 0) { /*or block*/ 
---
> 				if (_t3.state != 0) { /*or block*/
16268c15085
< 				
---
> 
16271c15088
< 				if (_t4.state != 0) { /*or block*/ 
---
> 				if (_t4.state != 0) { /*or block*/
16281c15098
< 				
---
> 
16301c15118
< 					if (_t7.state != 0) { /*or block*/ 
---
> 					if (_t7.state != 0) { /*or block*/
16305c15122
< 					
---
> 
16311c15128
< 					if (_t8.state != 0) { /*or block*/ 
---
> 					if (_t8.state != 0) { /*or block*/
16321c15138
< 					
---
> 
16324c15141
< 					if (_t10.state != 0) { /*or block*/ 
---
> 					if (_t10.state != 0) { /*or block*/
16334c15151
< 					
---
> 
16434c15251
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
16447c15264
< 	
---
> 
16569c15386
< 		if (_t2.state != 0) { /*or block*/ 
---
> 		if (_t2.state != 0) { /*or block*/
16573c15390
< 		
---
> 
16605c15422
< 					if (_t5.state != 0) { /*or block*/ 
---
> 					if (_t5.state != 0) { /*or block*/
16609c15426
< 					
---
> 
16639c15456
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
16656c15473
< 		if (_t5.state != 0) { /*or block*/ 
---
> 		if (_t5.state != 0) { /*or block*/
16666c15483
< 			if (_t7.state != 0) { /*or block*/ 
---
> 			if (_t7.state != 0) { /*or block*/
16707c15524
< 		if (_t13.state != 0) { /*or block*/ 
---
> 		if (_t13.state != 0) { /*or block*/
17170c15987
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
17174c15991
< 	
---
> 
17185c16002
< 		if (_t3.state != 0) { /*or block*/ 
---
> 		if (_t3.state != 0) { /*or block*/
17189c16006
< 		
---
> 
17364c16181
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
17708c16525
< voidptr memcpy(voidptr dest, const voidptr const_src, u64 size) {
---
> voidptr memcpy(void* __restrict dest, const void* __restrict const_src, u64 size) {
17974c16791
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
17984c16801
< 	
---
> 
17996c16813
< 	if (_t4.state != 0) { /*or block*/ 
---
> 	if (_t4.state != 0) { /*or block*/
18024c16841
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
18034c16851
< 	
---
> 
18113c16930
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
18117c16934
< 	
---
> 
18159c16976
< 		if (_t2.state != 0) { /*or block*/ 
---
> 		if (_t2.state != 0) { /*or block*/
18165c16982
< 		
---
> 
18204c17021
< 		if (_t8.state != 0) { /*or block*/ 
---
> 		if (_t8.state != 0) { /*or block*/
18227c17044
< 		
---
> 
18268c17085
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
18278c17095
< 	
---
> 
18296c17113
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
18306c17123
< 	
---
> 
18448c17265
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
18452c17269
< 	
---
> 
18513c17330
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
18517c17334
< 	
---
> 
18522c17339
< 	if (_t4.state != 0) { /*or block*/ 
---
> 	if (_t4.state != 0) { /*or block*/
18527c17344
< 	
---
> 
18542c17359
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
18552c17369
< 	
---
> 
18568c17385
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
18578c17395
< 	
---
> 
18585c17402
< 		if (_t3.state != 0) { /*or block*/ 
---
> 		if (_t3.state != 0) { /*or block*/
18595c17412
< 		
---
> 
18658c17475
< 		if (_t1.state != 0) { /*or block*/ 
---
> 		if (_t1.state != 0) { /*or block*/
18668c17485
< 		
---
> 
18694c17511
< 	if (_t4.state != 0) { /*or block*/ 
---
> 	if (_t4.state != 0) { /*or block*/
18711c17528
< 	
---
> 
19202c18019
< 			if (_t1.state != 0) { /*or block*/ 
---
> 			if (_t1.state != 0) { /*or block*/
19206c18023
< 			
---
> 
19259c18076
< 	if (_t4.state != 0) { /*or block*/ 
---
> 	if (_t4.state != 0) { /*or block*/
19264c18081
< 	
---
> 
19364c18181
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
19369c18186
< 	
---
> 
19414c18231
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
19418c18235
< 	
---
> 
19440c18257
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
19450c18267
< 	
---
> 
19490c18307
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
19500c18317
< 	
---
> 
19525c18342
< 	if (_t6.state != 0) { /*or block*/ 
---
> 	if (_t6.state != 0) { /*or block*/
19562c18379
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
19572c18389
< 	
---
> 
19575c18392
< 	if (_t4.state != 0) { /*or block*/ 
---
> 	if (_t4.state != 0) { /*or block*/
19585c18402
< 	
---
> 
19626c18443
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
19636c18453
< 	
---
> 
19641c18458
< 	if (_t4.state != 0) { /*or block*/ 
---
> 	if (_t4.state != 0) { /*or block*/
19646c18463
< 			if (_t6.state != 0) { /*or block*/ 
---
> 			if (_t6.state != 0) { /*or block*/
19656c18473
< 			
---
> 
19664c18481
< 	
---
> 
19704c18521
< 	if (_t12.state != 0) { /*or block*/ 
---
> 	if (_t12.state != 0) { /*or block*/
19714c18531
< 	
---
> 
19733c18550
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
19743c18560
< 	
---
> 
19747c18564
< 	if (_t3.state != 0) { /*or block*/ 
---
> 	if (_t3.state != 0) { /*or block*/
19762c18579
< 	
---
> 
19785c18602
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
19795c18612
< 	
---
> 
19799c18616
< 	if (_t3.state != 0) { /*or block*/ 
---
> 	if (_t3.state != 0) { /*or block*/
19814c18631
< 	
---
> 
19862c18679
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
19872c18689
< 	
---
> 
19876c18693
< 	if (_t3.state != 0) { /*or block*/ 
---
> 	if (_t3.state != 0) { /*or block*/
19891c18708
< 	
---
> 
19947c18764
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
19957c18774
< 	
---
> 
19961c18778
< 	if (_t4.state != 0) { /*or block*/ 
---
> 	if (_t4.state != 0) { /*or block*/
19997c18814
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
20007c18824
< 	
---
> 
20011c18828
< 	if (_t4.state != 0) { /*or block*/ 
---
> 	if (_t4.state != 0) { /*or block*/
20021c18838
< 	
---
> 
20043c18860
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
20053c18870
< 	
---
> 
20089c18906
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
20099c18916
< 	
---
> 
20129c18946
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
20139c18956
< 	
---
> 
20225c19042
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
20235c19052
< 	
---
> 
20242c19059
< 	
---
> 
20373c19190
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
20383c19200
< 	
---
> 
20386c19203
< 	if (_t3.state != 0) { /*or block*/ 
---
> 	if (_t3.state != 0) { /*or block*/
20396c19213
< 	
---
> 
20399c19216
< 	if (_t5.state != 0) { /*or block*/ 
---
> 	if (_t5.state != 0) { /*or block*/
20409c19226
< 	
---
> 
20460c19277
< 		if (_t3.state != 0) { /*or block*/ 
---
> 		if (_t3.state != 0) { /*or block*/
20520c19337
< 		if (_t1.state != 0) { /*or block*/ 
---
> 		if (_t1.state != 0) { /*or block*/
20639c19456
< 		
---
> 
20649c19466
< 			if (_t2.state != 0) { /*or block*/ 
---
> 			if (_t2.state != 0) { /*or block*/
20659c19476
< 			if (_t3.state != 0) { /*or block*/ 
---
> 			if (_t3.state != 0) { /*or block*/
20665c19482
< 			
---
> 
20670c19487
< 			if (_t4.state != 0) { /*or block*/ 
---
> 			if (_t4.state != 0) { /*or block*/
20680c19497
< 			if (_t5.state != 0) { /*or block*/ 
---
> 			if (_t5.state != 0) { /*or block*/
20933c19750
< 	if (_t3.state != 0) { /*or block*/ 
---
> 	if (_t3.state != 0) { /*or block*/
21012c19829
< 	if (_t8.state != 0) { /*or block*/ 
---
> 	if (_t8.state != 0) { /*or block*/
21022c19839
< 	
---
> 
21088c19905
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
21098c19915
< 	
---
> 
21105c19922
< 		if (_t3.state != 0) { /*or block*/ 
---
> 		if (_t3.state != 0) { /*or block*/
21163c19980
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
21168c19985
< 	
---
> 
21173c19990
< 	if (_t3.state != 0) { /*or block*/ 
---
> 	if (_t3.state != 0) { /*or block*/
21178c19995
< 	
---
> 
21187c20004
< 		if (_t5.state != 0) { /*or block*/ 
---
> 		if (_t5.state != 0) { /*or block*/
21192c20009
< 		
---
> 
21196c20013
< 		if (_t7.state != 0) { /*or block*/ 
---
> 		if (_t7.state != 0) { /*or block*/
21201c20018
< 		
---
> 
21208c20025
< 		if (_t9.state != 0) { /*or block*/ 
---
> 		if (_t9.state != 0) { /*or block*/
21213c20030
< 		
---
> 
21216c20033
< 		if (_t11.state != 0) { /*or block*/ 
---
> 		if (_t11.state != 0) { /*or block*/
21221c20038
< 		
---
> 
21227c20044
< 		if (_t13.state != 0) { /*or block*/ 
---
> 		if (_t13.state != 0) { /*or block*/
21232c20049
< 		
---
> 
21238c20055
< 		if (_t15.state != 0) { /*or block*/ 
---
> 		if (_t15.state != 0) { /*or block*/
21243c20060
< 		
---
> 
21249c20066
< 		if (_t17.state != 0) { /*or block*/ 
---
> 		if (_t17.state != 0) { /*or block*/
21279c20096
< 		if (_t22.state != 0) { /*or block*/ 
---
> 		if (_t22.state != 0) { /*or block*/
21306c20123
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
21311c20128
< 	
---
> 
21317c20134
< 		if (_t2.state != 0) { /*or block*/ 
---
> 		if (_t2.state != 0) { /*or block*/
21321c20138
< 		
---
> 
22021c20838
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
22040c20857
< 		if (_t4.state != 0) { /*or block*/ 
---
> 		if (_t4.state != 0) { /*or block*/
22070c20887
< 	if (_t7.state != 0) { /*or block*/ 
---
> 	if (_t7.state != 0) { /*or block*/
22278c21095
< 		if (_t1.state != 0) { /*or block*/ 
---
> 		if (_t1.state != 0) { /*or block*/
22459c21276
< 	
---
> 
22543c21360
< 		if (_t1.state != 0) { /*or block*/ 
---
> 		if (_t1.state != 0) { /*or block*/
22573c21390
< 					if (_t3.state != 0) { /*or block*/ 
---
> 					if (_t3.state != 0) { /*or block*/
22779c21596
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
22785c21602
< 	
---
> 
22848c21665
< 		if (_t1.state != 0) { /*or block*/ 
---
> 		if (_t1.state != 0) { /*or block*/
22857c21674
< 		
---
> 
22886c21703
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
22919c21736
< 	if (_t1.state != 0) { /*or block*/ 
---
> 	if (_t1.state != 0) { /*or block*/
22925c21742
< 	
---
> 
23524c22341
< 	if (_t2.state != 0) { /*or block*/ 
---
> 	if (_t2.state != 0) { /*or block*/
23545c22362
< 	if (_t4.state != 0) { /*or block*/ 
---
> 	if (_t4.state != 0) { /*or block*/
23983,23985c22800,22802
< 	interrupt_thunk_offset = *(u64*)&((u64[]){0}[0]); // global
< 	interrupt_thunk_size = *(u64*)&((u64[]){0}[0]); // global
< 	interrupt_thunk_number = *(u32*)&((u32[]){0}[0]); // global
---
> 	// interrupt_thunk_offset = *(u64*)&((u64[]){0}[0]); // global
> 	// interrupt_thunk_size = *(u64*)&((u64[]){0}[0]); // global
> 	// interrupt_thunk_number = *(u32*)&((u32[]){0}[0]); // global
