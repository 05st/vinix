diff --git a/3rdparty/mlibc-orig/abis/mlibc/signal.h b/3rdparty/mlibc-workdir/abis/mlibc/signal.h
index e1afc76..c9d3226 100644
--- a/3rdparty/mlibc-orig/abis/mlibc/signal.h
+++ b/3rdparty/mlibc-workdir/abis/mlibc/signal.h
@@ -105,10 +105,12 @@ struct sigevent {
 };
 
 struct sigaction {
-	void (*sa_handler)(int);
+    union {
+    	void (*sa_handler)(int);
+	    void (*sa_sigaction)(int, siginfo_t *, void *);
+	};
 	sigset_t sa_mask;
 	int sa_flags;
-	void (*sa_sigaction)(int, siginfo_t *, void *);
 };
 
 // TODO: this struct won't work on all arches (for example aarch64) but
diff --git a/3rdparty/mlibc-orig/meson.build b/3rdparty/mlibc-workdir/meson.build
index edcd230..8d03d32 100644
--- a/3rdparty/mlibc-orig/meson.build
+++ b/3rdparty/mlibc-workdir/meson.build
@@ -44,7 +44,7 @@ if not headers_only
 	add_languages('c', 'cpp')
 	c_compiler = meson.get_compiler('c')
 
-	add_project_arguments('-nostdinc', '-fno-builtin', language: ['c', 'cpp'])
+	add_project_arguments('-nostdinc', '-fno-builtin', '-fno-omit-frame-pointer', language: ['c', 'cpp'])
 	add_project_arguments('-std=c++20', language: 'cpp')
 	add_project_arguments('-fno-rtti', '-fno-exceptions', language: 'cpp')
 	add_project_link_arguments('-nostdlib', language: ['c', 'cpp'])
@@ -102,6 +102,10 @@ elif host_machine.system() == 'qword'
 	rtdl_include_dirs += include_directories('sysdeps/qword/include')
 	libc_include_dirs += include_directories('sysdeps/qword/include')
 	subdir('sysdeps/qword')
+elif host_machine.system() == 'vinix'
+	rtdl_include_dirs += include_directories('sysdeps/vinix/include')
+	libc_include_dirs += include_directories('sysdeps/vinix/include')
+	subdir('sysdeps/vinix')
 elif host_machine.system() == 'sigma'
 	#disable_linux_option = true
 	rtdl_include_dirs += include_directories('sysdeps/sigma/include')
diff --git a/3rdparty/mlibc-orig/options/internal/include/bits/feature.h b/3rdparty/mlibc-workdir/options/internal/include/bits/feature.h
index 5784c4d..f42475a 100644
--- a/3rdparty/mlibc-orig/options/internal/include/bits/feature.h
+++ b/3rdparty/mlibc-workdir/options/internal/include/bits/feature.h
@@ -3,8 +3,8 @@
 
 // TODO: The files for this macro are chosen somewhat arbitrarily.
 // TODO: Choose canonical files (like a bits/posix/alltypes.h)
-#define __MLIBC_ANSI_OPTION __has_include(<stdlib.h>)
-#define __MLIBC_POSIX_OPTION __has_include(<unistd.h>)
-#define __MLIBC_LINUX_OPTION __has_include(<linux/types.h>)
+#define __MLIBC_ANSI_OPTION 1
+#define __MLIBC_POSIX_OPTION 1
+#define __MLIBC_LINUX_OPTION 1
 
 #endif // _BITS_FEATURE_H
diff --git a/3rdparty/mlibc-orig/options/internal/include/bits/types.h b/3rdparty/mlibc-workdir/options/internal/include/bits/types.h
index 0488309..a9c8177 100644
--- a/3rdparty/mlibc-orig/options/internal/include/bits/types.h
+++ b/3rdparty/mlibc-workdir/options/internal/include/bits/types.h
@@ -1,6 +1,17 @@
 #ifndef _MLIBC_INTERNAL_TYPES_H
 #define _MLIBC_INTERNAL_TYPES_H
 
+#ifdef __TINYC__
+typedef unsigned char __mlibc_uint8;
+typedef unsigned short __mlibc_uint16;
+typedef unsigned int __mlibc_uint32;
+typedef unsigned long __mlibc_uint64;
+
+typedef signed char __mlibc_int8;
+typedef signed short __mlibc_int16;
+typedef signed int __mlibc_int32;
+typedef signed long __mlibc_int64;
+#else
 typedef __UINT8_TYPE__  __mlibc_uint8;
 typedef __UINT16_TYPE__ __mlibc_uint16;
 typedef __UINT32_TYPE__ __mlibc_uint32;
@@ -10,6 +21,7 @@ typedef __INT8_TYPE__  __mlibc_int8;
 typedef __INT16_TYPE__ __mlibc_int16;
 typedef __INT32_TYPE__ __mlibc_int32;
 typedef __INT64_TYPE__ __mlibc_int64;
+#endif
 
 // Clang and GCC have different mechanisms for INT32_C and friends.
 #ifdef __clang__
@@ -198,9 +210,24 @@ typedef __mlibc_uint64 __mlibc_uint_fast64;
 
 // Special types.
 
+#ifdef __TINYC__
+typedef signed long __mlibc_intmax;
+typedef signed long __mlibc_intptr;
+typedef signed long __mlibc_ptrdiff;
+
+typedef unsigned long __mlibc_uintmax;
+typedef unsigned long __mlibc_uintptr;
+typedef unsigned long __mlibc_size;
+#else
 typedef __INTMAX_TYPE__  __mlibc_intmax;
 typedef __INTPTR_TYPE__  __mlibc_intptr;
 typedef __PTRDIFF_TYPE__ __mlibc_ptrdiff;
+
+typedef __UINTMAX_TYPE__ __mlibc_uintmax;
+typedef __UINTPTR_TYPE__ __mlibc_uintptr;
+typedef __SIZE_TYPE__    __mlibc_size;
+#endif
+
 #define __MLIBC_INTMAX_MAX __INTMAX_MAX__
 #define __MLIBC_INTMAX_MIN (-__INTMAX_MAX__ - 1)
 #define __MLIBC_INTPTR_MAX __INTPTR_MAX__
@@ -208,9 +235,6 @@ typedef __PTRDIFF_TYPE__ __mlibc_ptrdiff;
 #define __MLIBC_PTRDIFF_MAX __PTRDIFF_MAX__
 #define __MLIBC_PTRDIFF_MIN (-__PTRDIFF_MAX__ - 1)
 
-typedef __UINTMAX_TYPE__ __mlibc_uintmax;
-typedef __UINTPTR_TYPE__ __mlibc_uintptr;
-typedef __SIZE_TYPE__    __mlibc_size;
 #define __MLIBC_UINTMAX_MAX __UINTMAX_MAX__
 #define __MLIBC_UINTPTR_MAX __UINTPTR_MAX__
 #define __MLIBC_SIZE_MAX __SIZE_MAX__
@@ -230,6 +254,8 @@ typedef __SIZE_TYPE__    __mlibc_size;
 // Sanity checking. Make sure that we agree with the compiler's ABI.
 // ----------------------------------------------------------------------------
 
+#ifndef __TINYC__
+
 #if defined(__cpp_static_assert)
 #	define __MLIBC_STATIC_ASSERT(c, text) static_assert(c, text)
 #elif !defined(__cplusplus)
@@ -266,4 +292,6 @@ __MLIBC_CHECK_TYPE(__mlibc_uint64, __UINT_LEAST64_TYPE__);
 	__MLIBC_CHECK_TYPE(__mlibc_uint_fast64, __UINT_FAST64_TYPE__);
 #endif
 
+#endif
+
 #endif // _MLIBC_INTERNAL_TYPES_H
diff --git a/3rdparty/mlibc-orig/options/internal/include/mlibc/internal-sysdeps.hpp b/3rdparty/mlibc-workdir/options/internal/include/mlibc/internal-sysdeps.hpp
index 0bd4a05..d2a1e9a 100644
--- a/3rdparty/mlibc-orig/options/internal/include/mlibc/internal-sysdeps.hpp
+++ b/3rdparty/mlibc-workdir/options/internal/include/mlibc/internal-sysdeps.hpp
@@ -9,6 +9,7 @@
 #include <bits/ssize_t.h>
 #include <abi-bits/stat.h>
 #include <mlibc/fsfd_target.hpp>
+#include <bits/posix/posix_signal.h>
 
 namespace [[gnu::visibility("hidden")]] mlibc {
 
@@ -35,6 +36,9 @@ int sys_close(int fd);
 int sys_vm_map(void *hint, size_t size, int prot, int flags, int fd, off_t offset, void **window);
 int sys_vm_unmap(void *pointer, size_t size);
 
+int sys_sigentry(void *pointer);
+[[noreturn]] int sys_sigreturn(void *context, sigset_t old_mask);
+
 } //namespace mlibc
 
 #endif // MLIBC_INTERNAL_SYSDEPS
diff --git a/3rdparty/mlibc-orig/options/linux/include/asm/ioctls.h b/3rdparty/mlibc-workdir/options/linux/include/asm/ioctls.h
index 41d4248..f246d1d 100644
--- a/3rdparty/mlibc-orig/options/linux/include/asm/ioctls.h
+++ b/3rdparty/mlibc-workdir/options/linux/include/asm/ioctls.h
@@ -5,6 +5,8 @@
 
 #define TCGETS 0x5401
 #define TCSETS 0x5402
+#define TCSETSW 0x5403
+#define TCSETSF 0x5404
 #define TIOCSCTTY 0x540E
 #define TIOCSTI 0x5412
 #define TIOCGWINSZ 0x5413
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/crt-x86_64/crt0.S b/3rdparty/mlibc-workdir/sysdeps/vinix/crt-x86_64/crt0.S
new file mode 100644
index 0000000..06ab8a7
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/crt-x86_64/crt0.S
@@ -0,0 +1,5 @@
+.section .text
+.global _start
+_start:
+    mov $main, %rdi
+    call __mlibc_entry
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/generic/entry.cpp b/3rdparty/mlibc-workdir/sysdeps/vinix/generic/entry.cpp
new file mode 100644
index 0000000..53ea0e9
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/generic/entry.cpp
@@ -0,0 +1,58 @@
+#include <stdint.h>
+#include <stdlib.h>
+#include <bits/ensure.h>
+#include <mlibc/debug.hpp>
+#include <mlibc/elf/startup.h>
+#include <mlibc/all-sysdeps.hpp>
+
+// defined by the POSIX library
+void __mlibc_initLocale();
+
+extern "C" uintptr_t *__dlapi_entrystack();
+
+extern char **environ;
+static mlibc::exec_stack_data __mlibc_stack_data;
+
+struct LibraryGuard {
+	LibraryGuard();
+};
+
+static LibraryGuard guard;
+
+LibraryGuard::LibraryGuard() {
+	__mlibc_initLocale();
+
+	// Parse the exec() stack.
+	mlibc::parse_exec_stack(__dlapi_entrystack(), &__mlibc_stack_data);
+	mlibc::set_startup_data(__mlibc_stack_data.argc, __mlibc_stack_data.argv,
+			__mlibc_stack_data.envp);
+}
+
+static void __mlibc_sigentry(int which, siginfo_t *siginfo,
+                             void (*sa)(int, siginfo_t *, void *),
+                             void *ret_context, sigset_t prev_mask) {
+    switch ((uintptr_t)sa) {
+        // DFL
+        case (uintptr_t)(-2):
+            mlibc::infoLogger() << "mlibc: Unhandled signal " << which << "\n" << frg::endlog;
+            mlibc::sys_exit(128 + which);
+        // IGN
+        case (uintptr_t)(-3):
+            break;
+        default:
+            sa(which, siginfo, NULL);
+            break;
+    }
+
+    mlibc::sys_sigreturn(ret_context, prev_mask);
+
+    __builtin_unreachable();
+}
+
+extern "C" void __mlibc_entry(int (*main_fn)(int argc, char *argv[], char *env[])) {
+    mlibc::sys_sigentry((void *)__mlibc_sigentry);
+
+	auto result = main_fn(__mlibc_stack_data.argc, __mlibc_stack_data.argv, environ);
+	exit(result);
+}
+
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/generic/generic.cpp b/3rdparty/mlibc-workdir/sysdeps/vinix/generic/generic.cpp
new file mode 100644
index 0000000..85bc1cd
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/generic/generic.cpp
@@ -0,0 +1,497 @@
+#include <bits/ensure.h>
+#include <mlibc/debug.hpp>
+#include <mlibc/all-sysdeps.hpp>
+#include <errno.h>
+#include <dirent.h>
+#include <fcntl.h>
+#include <limits.h>
+#include <asm/ioctls.h>
+
+#define STUB_ONLY { __ensure(!"STUB_ONLY function was called"); __builtin_unreachable(); }
+
+struct __syscall_ret {
+    uint64_t ret;
+    uint64_t errno;
+};
+
+__attribute__((naked))
+static __syscall_ret __syscall(int number, ...) {
+    asm (
+        "int $0xf0\n\t"
+        "ret"
+    );
+}
+
+namespace mlibc {
+
+void sys_libc_log(const char *message) {
+    __syscall(0, message);
+}
+
+void sys_libc_panic() {
+    sys_libc_log("\nMLIBC PANIC\n");
+    sys_exit(1);
+    __builtin_unreachable();
+}
+
+void sys_exit(int status) {
+    __syscall(15, status);
+    __builtin_unreachable();
+}
+
+int sys_kill(pid_t pid, int signal) {
+    __syscall_ret ret = __syscall(26, pid, signal);
+
+    if (ret.errno != 0)
+        return ret.errno;
+
+    return 0;
+}
+
+int sys_tcgetattr(int fd, struct termios *attr) {
+    int ret;
+
+    if (int r = sys_ioctl(fd, TCGETS, attr, &ret) != 0) {
+        return r;
+    }
+
+    return 0;
+}
+
+int sys_tcsetattr(int fd, int optional_action, const struct termios *attr) {
+    int ret;
+
+    switch (optional_action) {
+        case TCSANOW:
+            optional_action = TCSETS; break;
+        case TCSADRAIN:
+            optional_action = TCSETSW; break;
+        case TCSAFLUSH:
+            optional_action = TCSETSF; break;
+        default:
+            __ensure(!"Unsupported tcsetattr");
+    }
+
+    if (int r = sys_ioctl(fd, optional_action, (void *)attr, &ret) != 0) {
+        return r;
+    }
+
+    return 0;
+}
+
+int sys_tcb_set(void *pointer) {
+    __syscall(7, pointer);
+    return 0;
+}
+
+int sys_futex_wait(int *pointer, int expected) {
+    __syscall_ret ret = __syscall(23, pointer, expected);
+
+    if (ret.errno != 0)
+        return ret.errno;
+
+    return 0;
+}
+
+int sys_futex_wake(int *pointer) {
+    __syscall_ret ret = __syscall(24, pointer);
+
+    if (ret.errno != 0)
+        return ret.errno;
+
+    int num_woken = ret.ret;
+
+	__ensure(num_woken >= 0 && num_woken <= 1);
+	return num_woken;
+}
+
+int sys_ioctl(int fd, unsigned long request, void *arg, int *result) {
+    __syscall_ret ret = __syscall(9, fd, request, arg);
+
+    if (ret.errno != 0)
+        return ret.errno;
+
+    *result = (int)ret.ret;
+    return 0;
+}
+
+int sys_isatty(int fd) {
+    struct winsize ws;
+    int ret;
+
+    if (!sys_ioctl(fd, TIOCGWINSZ, &ws, &ret))
+        return 0;
+
+    return ENOTTY;
+}
+
+int sys_getcwd(char *buffer, size_t size) {
+    __syscall_ret ret = __syscall(25, buffer, size);
+
+    if (ret.errno != 0)
+        return ret.errno;
+
+    return 0;
+}
+
+int sys_openat(int dirfd, const char *path, int flags, int *fd) {
+    __syscall_ret ret = __syscall(2, dirfd, path, flags, 0);
+
+    if (ret.errno != 0)
+        return ret.errno;
+
+    *fd = (int)ret.ret;
+    return 0;
+}
+
+int sys_open(const char *path, int flags, int *fd) {
+    return sys_openat(AT_FDCWD, path, flags, fd);
+}
+
+int sys_open_dir(const char *path, int *handle) {
+    return sys_open(path, 0, handle);
+}
+
+int sys_read_entries(int fd, void *buffer, size_t max_size, size_t *bytes_read) {
+    __syscall_ret ret = __syscall(19, fd, buffer);
+
+    if (ret.ret == (uint64_t)-1 && ret.errno == 0) {
+        // End of directory.
+        *bytes_read = 0;
+        return 0;
+    } else if (ret.errno != 0) {
+        return ret.errno;
+    }
+
+    *bytes_read = sizeof(struct dirent);
+    return 0;
+}
+
+int sys_close(int fd) {
+    __syscall_ret ret = __syscall(6, fd);
+
+    if (ret.errno != 0)
+        return ret.errno;
+
+    return 0;
+}
+
+int sys_seek(int fd, off_t offset, int whence, off_t *new_offset) {
+    __syscall_ret ret = __syscall(5, fd, offset, whence);
+
+    if (ret.errno != 0) {
+        return ret.errno;
+    }
+
+    *new_offset = (off_t)ret.ret;
+    return 0;
+}
+
+int sys_read(int fd, void *buf, size_t count, ssize_t *bytes_read) {
+    __syscall_ret ret = __syscall(3, fd, buf, count);
+
+    if (ret.errno != 0) {
+        return ret.errno;
+    }
+
+    *bytes_read = (ssize_t)ret.ret;
+    return 0;
+}
+
+int sys_write(int fd, const void *buf, size_t count, ssize_t *bytes_written) {
+    __syscall_ret ret = __syscall(4, fd, buf, count);
+
+    if (ret.errno != 0) {
+        return ret.errno;
+    }
+
+    *bytes_written = (ssize_t)ret.ret;
+    return 0;
+}
+
+int sys_readlink(const char *path, void *data, size_t max_size, ssize_t *length) {
+    __syscall_ret ret = __syscall(33, AT_FDCWD, path, data, max_size);
+
+    if (ret.errno != 0) {
+        return ret.errno;
+    }
+
+    *length = (ssize_t)ret.ret;
+    return 0;
+}
+
+int sys_unlinkat(int fd, const char *path, int flags) {
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+    return 0;
+}
+
+int sys_rmdir(const char *path) {
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+    return 0;
+}
+
+int sys_vm_map(void *hint, size_t size, int prot, int flags,
+               int fd, off_t offset, void **window) {
+    __syscall_ret ret = __syscall(1, hint, size,
+                                  (uint64_t)prot << 32 | (uint64_t)flags, fd, offset);
+    if (ret.errno != 0)
+        return ret.errno;
+
+    *window = (void *)ret.ret;
+    return 0;
+}
+
+int sys_vm_unmap(void *pointer, size_t size) STUB_ONLY
+
+int sys_anon_allocate(size_t size, void **pointer) {
+    return sys_vm_map(NULL, size, PROT_EXEC | PROT_READ | PROT_WRITE,
+                      MAP_ANONYMOUS, -1, 0, pointer);
+}
+
+int sys_anon_free(void *pointer, size_t size) {
+    return 0;
+}
+
+pid_t sys_getpid() {
+    __syscall_ret ret = __syscall(31);
+
+    return ret.ret;
+}
+
+pid_t sys_getppid() {
+    __syscall_ret ret = __syscall(32);
+
+    return ret.ret;
+}
+
+uid_t sys_getuid() {
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+    return 0;
+}
+
+uid_t sys_geteuid() {
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+    return 0;
+}
+
+gid_t sys_getgid() {
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+    return 0;
+}
+
+pid_t sys_getpgid(pid_t pid, pid_t *pgid) {
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+    *pgid = 0;
+    return 0;
+}
+
+gid_t sys_getegid() {
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+    return 0;
+}
+
+int sys_ttyname(int fd, char *buf, size_t size) {
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+    return ENOSYS;
+}
+
+int sys_clock_get(int clock, time_t *secs, long *nanos) {
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+    *secs  = 0;
+    *nanos = 0;
+    return 0;
+}
+
+int sys_gethostname(char *buffer, size_t bufsize) {
+    const char *hostname = "vinix";
+    for (size_t i = 0; i < bufsize; i++) {
+        buffer[i] = hostname[i];
+        if (hostname[i] == 0)
+            break;
+    }
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+    return 0;
+}
+
+int sys_stat(fsfd_target fsfdt, int fd, const char *path, int flags, struct stat *statbuf) {
+	switch (fsfdt) {
+        case fsfd_target::fd: {
+            __syscall_ret ret = __syscall(10, fd, statbuf);
+            if (ret.errno != 0)
+                return ret.errno;
+            return ret.ret;
+        }
+        case fsfd_target::path: {
+            __syscall_ret ret = __syscall(11, AT_FDCWD, path, statbuf, flags);
+            if (ret.errno != 0)
+                return ret.errno;
+            return ret.ret;
+        }
+        case fsfd_target::fd_path: {
+            __syscall_ret ret = __syscall(11, fd, path, statbuf, flags);
+            if (ret.errno != 0)
+                return ret.errno;
+            return ret.ret;
+        }
+        default: {
+            __ensure(!"stat: Invalid fsfdt");
+            __builtin_unreachable();
+        }
+    }
+    return 0;
+}
+
+int sys_faccessat(int dirfd, const char *pathname, int mode, int flags) {
+    __syscall_ret ret = __syscall(20, dirfd, pathname, mode, flags);
+
+    if (ret.errno != 0) {
+        return ret.errno;
+    }
+
+    return 0;
+}
+
+int sys_access(const char *path, int mode) {
+    return sys_faccessat(AT_FDCWD, path, mode, 0);
+}
+
+int sys_pipe(int *fds, int flags) {
+    __syscall_ret ret = __syscall(21, fds, flags);
+
+    if (ret.errno != 0) {
+        return ret.errno;
+    }
+
+    return 0;
+}
+
+int sys_chdir(const char *path) {
+    __syscall_ret ret = __syscall(18, path);
+
+    if (ret.errno != 0) {
+        return ret.errno;
+    }
+
+    return 0;
+}
+
+int sys_mkdir(const char *path) {
+    return sys_mkdirat(AT_FDCWD, path, 0755);
+}
+
+int sys_mkdirat(int dirfd, const char *path, mode_t mode) {
+    __syscall_ret ret = __syscall(22, dirfd, path, mode);
+
+    if (ret.errno != 0) {
+        return ret.errno;
+    }
+
+    return 0;
+}
+
+int sys_socket(int domain, int type_and_flags, int proto, int *fd) STUB_ONLY
+
+int sys_bind(int fd, const struct sockaddr *addr_ptr, socklen_t addr_length) STUB_ONLY
+
+int sys_fork(pid_t *child) {
+    __syscall_ret ret = __syscall(14);
+
+    if (ret.errno != 0) {
+        return ret.errno;
+    }
+
+    *child = (pid_t)ret.ret;
+    return 0;
+}
+
+int sys_execve(const char *path, char *const argv[], char *const envp[]) {
+    __syscall_ret ret = __syscall(17, path, argv, envp);
+
+    return ret.errno;
+}
+
+int sys_fcntl(int fd, int request, va_list args, int *result) {
+    __syscall_ret ret = __syscall(12, fd, request, va_arg(args, uint64_t));
+
+    if (ret.errno != 0)
+        return ret.errno;
+
+    *result = (ssize_t)ret.ret;
+    return 0;
+}
+
+int sys_dup(int fd, int flags, int *newfd) {
+    __syscall_ret ret = __syscall(12, fd, F_DUPFD, 0);
+
+    if (ret.errno != 0)
+        return ret.errno;
+
+    *newfd = (ssize_t)ret.ret;
+    return 0;
+}
+
+int sys_dup2(int fd, int flags, int newfd) {
+    __syscall_ret ret = __syscall(13, fd, newfd, flags);
+
+    if (ret.errno != 0)
+        return ret.errno;
+
+    return 0;
+}
+
+int sys_sigentry(void *sigentry) {
+    __syscall_ret ret = __syscall(27, sigentry);
+
+    if (ret.errno != 0)
+        return ret.errno;
+
+    return 0;
+}
+
+int sys_sigprocmask(int how, const sigset_t *__restrict set, sigset_t *__restrict retrieve) {
+    __syscall_ret ret = __syscall(28, how, set, retrieve);
+
+    if (ret.errno != 0)
+        return ret.errno;
+
+    return 0;
+}
+
+int sys_sigaction(int signum, const struct sigaction *act, struct sigaction *oldact) {
+    __syscall_ret ret = __syscall(29, signum, act, oldact);
+
+    if (ret.errno != 0)
+        return ret.errno;
+
+    return 0;
+}
+
+int sys_sigreturn(void *context, sigset_t old_mask) {
+    __syscall_ret ret = __syscall(30, context, old_mask);
+
+    __builtin_unreachable();
+}
+
+int sys_pselect(int num_fds, fd_set *read_set, fd_set *write_set, fd_set *except_set,
+		const struct timespec *timeout, const sigset_t *sigmask, int *num_events) {
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+    return 0;
+}
+
+int sys_waitpid(pid_t pid, int *status, int flags, pid_t *ret_pid) {
+again:
+    __syscall_ret ret = __syscall(16, pid, status, flags);
+
+    if (ret.errno != 0) {
+        if (ret.errno == EINTR) {
+            goto again;
+        }
+
+        return ret.errno;
+    }
+
+    *ret_pid = (pid_t)ret.ret;
+    return 0;
+}
+
+} // namespace mlibc
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/abi.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/abi.h
new file mode 120000
index 0000000..c945860
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/abi.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/abi.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/auxv.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/auxv.h
new file mode 120000
index 0000000..b7bb109
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/auxv.h
@@ -0,0 +1 @@
+../../../../abis/qword/auxv.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/blkcnt_t.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/blkcnt_t.h
new file mode 120000
index 0000000..e9d9f1b
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/blkcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/blkcnt_t.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/blksize_t.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/blksize_t.h
new file mode 120000
index 0000000..c6dfb6e
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/blksize_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/blksize_t.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/dev_t.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/dev_t.h
new file mode 120000
index 0000000..0c1143b
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/dev_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/dev_t.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/errno.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/errno.h
new file mode 120000
index 0000000..589859f
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/errno.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/errno.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/fcntl.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/fcntl.h
new file mode 120000
index 0000000..ea5323a
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/fcntl.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/fcntl.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/gid_t.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/gid_t.h
new file mode 120000
index 0000000..6a77218
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/gid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/gid_t.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/in.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/in.h
new file mode 120000
index 0000000..b58c683
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/in.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/in.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/ino_t.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/ino_t.h
new file mode 120000
index 0000000..10d644e
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/ino_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/ino_t.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/mode_t.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/mode_t.h
new file mode 120000
index 0000000..29d7733
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/mode_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/mode_t.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/nlink_t.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/nlink_t.h
new file mode 120000
index 0000000..7618c27
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/nlink_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/nlink_t.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/pid_t.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/pid_t.h
new file mode 120000
index 0000000..3fd26a7
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/pid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/pid_t.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/reboot.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/reboot.h
new file mode 120000
index 0000000..ecc3ddb
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/reboot.h
@@ -0,0 +1 @@
+../../../../abis/linux/x86_64/reboot.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/resource.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/resource.h
new file mode 120000
index 0000000..3e59c75
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/resource.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/resource.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/seek-whence.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/seek-whence.h
new file mode 120000
index 0000000..3bd41ef
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/seek-whence.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/seek-whence.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/signal.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/signal.h
new file mode 120000
index 0000000..b20e511
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/signal.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/signal.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/socket.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/socket.h
new file mode 120000
index 0000000..0e1d6be
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/socket.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/socket.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/stat.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/stat.h
new file mode 120000
index 0000000..82642c3
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/stat.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/stat.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/termios.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/termios.h
new file mode 120000
index 0000000..cfcfe76
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/termios.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/termios.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/time.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/time.h
new file mode 120000
index 0000000..97f3d52
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/time.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/time.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/uid_t.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/uid_t.h
new file mode 120000
index 0000000..1113eba
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/uid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/uid_t.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/vm-flags.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/vm-flags.h
new file mode 120000
index 0000000..f1a985e
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/vm-flags.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/vm-flags.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/wait.h b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/wait.h
new file mode 120000
index 0000000..6d911c7
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/include/abi-bits/wait.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/wait.h
\ No newline at end of file
diff --git a/3rdparty/mlibc-workdir/sysdeps/vinix/meson.build b/3rdparty/mlibc-workdir/sysdeps/vinix/meson.build
new file mode 100644
index 0000000..4c3b59c
--- /dev/null
+++ b/3rdparty/mlibc-workdir/sysdeps/vinix/meson.build
@@ -0,0 +1,50 @@
+
+rtdl_sources += files(
+	'generic/generic.cpp'
+)
+
+libc_sources += files(
+	'generic/entry.cpp',
+	'generic/generic.cpp'
+)
+
+if not no_headers
+	install_headers(
+		'include/abi-bits/abi.h',
+		'include/abi-bits/auxv.h',
+		'include/abi-bits/seek-whence.h',
+		'include/abi-bits/vm-flags.h',
+		'include/abi-bits/errno.h',
+		'include/abi-bits/fcntl.h',
+		'include/abi-bits/in.h',
+		'include/abi-bits/resource.h',
+		'include/abi-bits/stat.h',
+		'include/abi-bits/signal.h',
+		'include/abi-bits/socket.h',
+		'include/abi-bits/termios.h',
+		'include/abi-bits/time.h',
+		'include/abi-bits/blkcnt_t.h',
+		'include/abi-bits/blksize_t.h',
+		'include/abi-bits/dev_t.h',
+		'include/abi-bits/gid_t.h',
+		'include/abi-bits/ino_t.h',
+		'include/abi-bits/mode_t.h',
+		'include/abi-bits/nlink_t.h',
+		'include/abi-bits/pid_t.h',
+		'include/abi-bits/uid_t.h',
+		'include/abi-bits/wait.h',
+		subdir: 'abi-bits'
+	)
+endif
+
+if not headers_only
+	crt = custom_target('crt0',
+		build_by_default: true,
+		command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+		input: 'crt-x86_64/crt0.S',
+		output: 'crt0.o',
+		install: true,
+		install_dir: get_option('libdir')
+	)
+endif
+
